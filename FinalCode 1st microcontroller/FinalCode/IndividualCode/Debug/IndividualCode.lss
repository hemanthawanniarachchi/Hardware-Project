
IndividualCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00000f76  0000100a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080012e  0080012e  000010d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029f5  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb9  00000000  00000000  00003d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000186e  00000000  00000000  00004ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  00006550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068f  00000000  00000000  00006838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001713  00000000  00000000  00006ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000085da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 32       	cpi	r26, 0x2E	; 46
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e2       	ldi	r26, 0x2E	; 46
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 33       	cpi	r26, 0x3B	; 59
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c5 01 	call	0x38a	; 0x38a <main>
  8a:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUZZER>:

#include "buzzer.h"

void BUZZER()
{
	DDRC |= 1<< DDD3;           
  92:	84 b3       	in	r24, 0x14	; 20
  94:	88 60       	ori	r24, 0x08	; 8
  96:	84 bb       	out	0x14, r24	; 20
	
	for(int i=1;i<2;i++)
	{
		PORTC &= ~(1<<3);
		_delay_ms(100);
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e1       	ldi	r24, 0x1F	; 31
  9e:	9e e4       	ldi	r25, 0x4E	; 78
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <BUZZER+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <BUZZER+0x14>
  a6:	00 00       	nop
		PORTC |=1<<3;
		_delay_ms(100);
	}
	
    
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	87 7f       	andi	r24, 0xF7	; 247
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	08 95       	ret

000000b0 <IR1_Initialize>:
 *
 * 
 */ 
#include "IR1.h"
void IR1_Initialize(){
	PORTD = 0x04;
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	82 bb       	out	0x12, r24	; 18
  b6:	08 95       	ret

000000b8 <IR1_checking>:
}

int IR1_checking(){
	int n1;
	
	if((PIND & 0x04) != 0)    // read PIND.2
  b8:	82 9b       	sbis	0x10, 2	; 16
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <IR1_checking+0xa>
		{
			n1=1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret
		}
	else{
			n1=0;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
	}
return n1;
}
  c6:	08 95       	ret

000000c8 <IR2_Initialize>:
 */ 

#include "IR2.h"
void IR2_Initialize(){
	
		PORTD = 0x08;
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	82 bb       	out	0x12, r24	; 18
  ce:	08 95       	ret

000000d0 <IR2_checking>:
	
}
int IR2_checking(){
	int n2;
	
	if((PIND & 0x08) != 0)    // read PIND.3
  d0:	83 9b       	sbis	0x10, 3	; 16
  d2:	03 c0       	rjmp	.+6      	; 0xda <IR2_checking+0xa>
	{
		n2=1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret
	}
	else{
		n2=0;
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
	}
	return n2;
}
  de:	08 95       	ret

000000e0 <keypad>:
  e0:	8e ef       	ldi	r24, 0xFE	; 254
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	cc 99       	sbic	0x19, 4	; 25
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <keypad+0x18>
  e8:	8f ed       	ldi	r24, 0xDF	; 223
  ea:	9e e2       	ldi	r25, 0x2E	; 46
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <keypad+0xc>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <keypad+0x12>
  f2:	00 00       	nop
  f4:	87 e3       	ldi	r24, 0x37	; 55
  f6:	08 95       	ret
  f8:	cd 99       	sbic	0x19, 5	; 25
  fa:	08 c0       	rjmp	.+16     	; 0x10c <keypad+0x2c>
  fc:	8f ed       	ldi	r24, 0xDF	; 223
  fe:	9e e2       	ldi	r25, 0x2E	; 46
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <keypad+0x20>
 104:	00 c0       	rjmp	.+0      	; 0x106 <keypad+0x26>
 106:	00 00       	nop
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	08 95       	ret
 10c:	ce 99       	sbic	0x19, 6	; 25
 10e:	08 c0       	rjmp	.+16     	; 0x120 <keypad+0x40>
 110:	8f ed       	ldi	r24, 0xDF	; 223
 112:	9e e2       	ldi	r25, 0x2E	; 46
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <keypad+0x34>
 118:	00 c0       	rjmp	.+0      	; 0x11a <keypad+0x3a>
 11a:	00 00       	nop
 11c:	89 e3       	ldi	r24, 0x39	; 57
 11e:	08 95       	ret
 120:	cf 99       	sbic	0x19, 7	; 25
 122:	08 c0       	rjmp	.+16     	; 0x134 <keypad+0x54>
 124:	8f ed       	ldi	r24, 0xDF	; 223
 126:	9e e2       	ldi	r25, 0x2E	; 46
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <keypad+0x48>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <keypad+0x4e>
 12e:	00 00       	nop
 130:	8f e2       	ldi	r24, 0x2F	; 47
 132:	08 95       	ret
 134:	8d ef       	ldi	r24, 0xFD	; 253
 136:	8b bb       	out	0x1b, r24	; 27
 138:	cc 99       	sbic	0x19, 4	; 25
 13a:	08 c0       	rjmp	.+16     	; 0x14c <keypad+0x6c>
 13c:	8f ed       	ldi	r24, 0xDF	; 223
 13e:	9e e2       	ldi	r25, 0x2E	; 46
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <keypad+0x60>
 144:	00 c0       	rjmp	.+0      	; 0x146 <keypad+0x66>
 146:	00 00       	nop
 148:	84 e3       	ldi	r24, 0x34	; 52
 14a:	08 95       	ret
 14c:	cd 99       	sbic	0x19, 5	; 25
 14e:	08 c0       	rjmp	.+16     	; 0x160 <keypad+0x80>
 150:	8f ed       	ldi	r24, 0xDF	; 223
 152:	9e e2       	ldi	r25, 0x2E	; 46
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <keypad+0x74>
 158:	00 c0       	rjmp	.+0      	; 0x15a <keypad+0x7a>
 15a:	00 00       	nop
 15c:	85 e3       	ldi	r24, 0x35	; 53
 15e:	08 95       	ret
 160:	ce 99       	sbic	0x19, 6	; 25
 162:	08 c0       	rjmp	.+16     	; 0x174 <keypad+0x94>
 164:	8f ed       	ldi	r24, 0xDF	; 223
 166:	9e e2       	ldi	r25, 0x2E	; 46
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <keypad+0x88>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <keypad+0x8e>
 16e:	00 00       	nop
 170:	86 e3       	ldi	r24, 0x36	; 54
 172:	08 95       	ret
 174:	cf 99       	sbic	0x19, 7	; 25
 176:	08 c0       	rjmp	.+16     	; 0x188 <keypad+0xa8>
 178:	8f ed       	ldi	r24, 0xDF	; 223
 17a:	9e e2       	ldi	r25, 0x2E	; 46
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <keypad+0x9c>
 180:	00 c0       	rjmp	.+0      	; 0x182 <keypad+0xa2>
 182:	00 00       	nop
 184:	8a e2       	ldi	r24, 0x2A	; 42
 186:	08 95       	ret
 188:	8b ef       	ldi	r24, 0xFB	; 251
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	cc 99       	sbic	0x19, 4	; 25
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <keypad+0xc0>
 190:	8f ed       	ldi	r24, 0xDF	; 223
 192:	9e e2       	ldi	r25, 0x2E	; 46
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <keypad+0xb4>
 198:	00 c0       	rjmp	.+0      	; 0x19a <keypad+0xba>
 19a:	00 00       	nop
 19c:	81 e3       	ldi	r24, 0x31	; 49
 19e:	08 95       	ret
 1a0:	cd 99       	sbic	0x19, 5	; 25
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <keypad+0xd4>
 1a4:	8f ed       	ldi	r24, 0xDF	; 223
 1a6:	9e e2       	ldi	r25, 0x2E	; 46
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <keypad+0xc8>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <keypad+0xce>
 1ae:	00 00       	nop
 1b0:	82 e3       	ldi	r24, 0x32	; 50
 1b2:	08 95       	ret
 1b4:	ce 99       	sbic	0x19, 6	; 25
 1b6:	08 c0       	rjmp	.+16     	; 0x1c8 <keypad+0xe8>
 1b8:	8f ed       	ldi	r24, 0xDF	; 223
 1ba:	9e e2       	ldi	r25, 0x2E	; 46
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <keypad+0xdc>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <keypad+0xe2>
 1c2:	00 00       	nop
 1c4:	83 e3       	ldi	r24, 0x33	; 51
 1c6:	08 95       	ret
 1c8:	cf 99       	sbic	0x19, 7	; 25
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <keypad+0xfc>
 1cc:	8f ed       	ldi	r24, 0xDF	; 223
 1ce:	9e e2       	ldi	r25, 0x2E	; 46
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <keypad+0xf0>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <keypad+0xf6>
 1d6:	00 00       	nop
 1d8:	8d e2       	ldi	r24, 0x2D	; 45
 1da:	08 95       	ret
 1dc:	87 ef       	ldi	r24, 0xF7	; 247
 1de:	8b bb       	out	0x1b, r24	; 27
 1e0:	cc 99       	sbic	0x19, 4	; 25
 1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <keypad+0x114>
 1e4:	8f ed       	ldi	r24, 0xDF	; 223
 1e6:	9e e2       	ldi	r25, 0x2E	; 46
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <keypad+0x108>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <keypad+0x10e>
 1ee:	00 00       	nop
 1f0:	83 e4       	ldi	r24, 0x43	; 67
 1f2:	08 95       	ret
 1f4:	cd 99       	sbic	0x19, 5	; 25
 1f6:	08 c0       	rjmp	.+16     	; 0x208 <keypad+0x128>
 1f8:	8f ed       	ldi	r24, 0xDF	; 223
 1fa:	9e e2       	ldi	r25, 0x2E	; 46
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <keypad+0x11c>
 200:	00 c0       	rjmp	.+0      	; 0x202 <keypad+0x122>
 202:	00 00       	nop
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	08 95       	ret
 208:	ce 99       	sbic	0x19, 6	; 25
 20a:	08 c0       	rjmp	.+16     	; 0x21c <keypad+0x13c>
 20c:	8f ed       	ldi	r24, 0xDF	; 223
 20e:	9e e2       	ldi	r25, 0x2E	; 46
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <keypad+0x130>
 214:	00 c0       	rjmp	.+0      	; 0x216 <keypad+0x136>
 216:	00 00       	nop
 218:	8d e3       	ldi	r24, 0x3D	; 61
 21a:	08 95       	ret
 21c:	cf 99       	sbic	0x19, 7	; 25
 21e:	08 c0       	rjmp	.+16     	; 0x230 <keypad+0x150>
 220:	8f ed       	ldi	r24, 0xDF	; 223
 222:	9e e2       	ldi	r25, 0x2E	; 46
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <keypad+0x144>
 228:	00 c0       	rjmp	.+0      	; 0x22a <keypad+0x14a>
 22a:	00 00       	nop
 22c:	8b e2       	ldi	r24, 0x2B	; 43
 22e:	08 95       	ret
 230:	08 95       	ret

00000232 <lcdcmd>:

void lcdcmd(unsigned char cmd)
{
	PORTD&=~(1<<RS);
	PORTD&=~(1<<RW);
	LCD=cmd & 0xF0;
 232:	92 b3       	in	r25, 0x12	; 18
 234:	9f 7d       	andi	r25, 0xDF	; 223
 236:	92 bb       	out	0x12, r25	; 18
	PORTD|=(1<<EN);
 238:	92 b3       	in	r25, 0x12	; 18
 23a:	9f 7b       	andi	r25, 0xBF	; 191
 23c:	92 bb       	out	0x12, r25	; 18
	_delay_ms(20);
 23e:	98 2f       	mov	r25, r24
 240:	90 7f       	andi	r25, 0xF0	; 240
 242:	98 bb       	out	0x18, r25	; 24
	PORTD&=~(1<<EN);
 244:	92 b3       	in	r25, 0x12	; 18
 246:	90 68       	ori	r25, 0x80	; 128
 248:	92 bb       	out	0x12, r25	; 18
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	31 ee       	ldi	r19, 0xE1	; 225
 24e:	94 e0       	ldi	r25, 0x04	; 4
 250:	21 50       	subi	r18, 0x01	; 1
 252:	30 40       	sbci	r19, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <lcdcmd+0x1e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcdcmd+0x28>
 25a:	00 00       	nop
	LCD=cmd<<4;
	PORTD|=(1<<EN);
 25c:	92 b3       	in	r25, 0x12	; 18
 25e:	9f 77       	andi	r25, 0x7F	; 127
 260:	92 bb       	out	0x12, r25	; 18
	_delay_ms(20);
 262:	82 95       	swap	r24
 264:	80 7f       	andi	r24, 0xF0	; 240
 266:	88 bb       	out	0x18, r24	; 24
	PORTD&=~(1<<EN);
 268:	82 b3       	in	r24, 0x12	; 18
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	82 bb       	out	0x12, r24	; 18
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	31 ee       	ldi	r19, 0xE1	; 225
 272:	84 e0       	ldi	r24, 0x04	; 4
 274:	21 50       	subi	r18, 0x01	; 1
 276:	30 40       	sbci	r19, 0x00	; 0
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <lcdcmd+0x42>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcdcmd+0x4c>
 27e:	00 00       	nop
}
void lcddata(unsigned char data)
 280:	82 b3       	in	r24, 0x12	; 18
 282:	8f 77       	andi	r24, 0x7F	; 127
 284:	82 bb       	out	0x12, r24	; 18
 286:	08 95       	ret

00000288 <lcddata>:
{
	PORTD|=(1<<RS);
	PORTD&=~(1<<RW);
	LCD=data & 0xF0;
 288:	92 b3       	in	r25, 0x12	; 18
 28a:	90 62       	ori	r25, 0x20	; 32
 28c:	92 bb       	out	0x12, r25	; 18
	PORTD|=(1<<EN);
 28e:	92 b3       	in	r25, 0x12	; 18
 290:	9f 7b       	andi	r25, 0xBF	; 191
 292:	92 bb       	out	0x12, r25	; 18
	_delay_ms(20);
 294:	98 2f       	mov	r25, r24
 296:	90 7f       	andi	r25, 0xF0	; 240
 298:	98 bb       	out	0x18, r25	; 24
	PORTD&=~(1<<EN);
 29a:	92 b3       	in	r25, 0x12	; 18
 29c:	90 68       	ori	r25, 0x80	; 128
 29e:	92 bb       	out	0x12, r25	; 18
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	31 ee       	ldi	r19, 0xE1	; 225
 2a4:	94 e0       	ldi	r25, 0x04	; 4
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	30 40       	sbci	r19, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <lcddata+0x1e>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcddata+0x28>
 2b0:	00 00       	nop
	LCD=data << 4;
	PORTD|=(1<<EN);
 2b2:	92 b3       	in	r25, 0x12	; 18
 2b4:	9f 77       	andi	r25, 0x7F	; 127
 2b6:	92 bb       	out	0x12, r25	; 18
	_delay_ms(20);
 2b8:	82 95       	swap	r24
 2ba:	80 7f       	andi	r24, 0xF0	; 240
 2bc:	88 bb       	out	0x18, r24	; 24
	PORTD&=~(1<<EN);
 2be:	82 b3       	in	r24, 0x12	; 18
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	82 bb       	out	0x12, r24	; 18
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	31 ee       	ldi	r19, 0xE1	; 225
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	30 40       	sbci	r19, 0x00	; 0
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <lcddata+0x42>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <lcddata+0x4c>
 2d4:	00 00       	nop
}
void lcd_init()
 2d6:	82 b3       	in	r24, 0x12	; 18
 2d8:	8f 77       	andi	r24, 0x7F	; 127
 2da:	82 bb       	out	0x12, r24	; 18
 2dc:	08 95       	ret

000002de <lcd_init>:
{
	DDRB=0xFF;
	DDRD=0xFF;
	PORTD&=~(1<<EN);
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	87 bb       	out	0x17, r24	; 23
	lcdcmd(0x33);
 2e2:	81 bb       	out	0x11, r24	; 17
	lcdcmd(0x32);
 2e4:	82 b3       	in	r24, 0x12	; 18
 2e6:	8f 77       	andi	r24, 0x7F	; 127
 2e8:	82 bb       	out	0x12, r24	; 18
	lcdcmd(0x28);
 2ea:	83 e3       	ldi	r24, 0x33	; 51
 2ec:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
	lcdcmd(0x0E);
 2f0:	82 e3       	ldi	r24, 0x32	; 50
 2f2:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
	lcdcmd(0x01);
 2f6:	88 e2       	ldi	r24, 0x28	; 40
 2f8:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
	_delay_ms(10);
 2fc:	8e e0       	ldi	r24, 0x0E	; 14
 2fe:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
}
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	81 ee       	ldi	r24, 0xE1	; 225
 30c:	94 e0       	ldi	r25, 0x04	; 4
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <lcd_init+0x30>
 316:	00 c0       	rjmp	.+0      	; 0x318 <lcd_init+0x3a>
 318:	00 00       	nop
 31a:	08 95       	ret

0000031c <lcd_print>:
void lcd_print(char *str)
{
	unsigned char i=0;
	while(str[i]!=0)
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	8c 01       	movw	r16, r24
	{
 324:	c0 e0       	ldi	r28, 0x00	; 0
		lcddata(str[i]);
 326:	03 c0       	rjmp	.+6      	; 0x32e <lcd_print+0x12>
		i++;
	}
 328:	0e 94 44 01 	call	0x288	; 0x288 <lcddata>
}
 32c:	cf 5f       	subi	r28, 0xFF	; 255
void lcd_print(char *str)
{
	unsigned char i=0;
	while(str[i]!=0)
	{
		lcddata(str[i]);
 32e:	f8 01       	movw	r30, r16
 330:	ec 0f       	add	r30, r28
 332:	f1 1d       	adc	r31, r1
 334:	80 81       	ld	r24, Z
 336:	81 11       	cpse	r24, r1
 338:	f7 cf       	rjmp	.-18     	; 0x328 <lcd_print+0xc>
		i++;
	}
}
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	08 95       	ret

00000342 <USART_Init>:
}

void USART_TxNumber(int32_t number,uint8_t dtype){
	
	itoa(number,num,dtype);
	USART_TxString(num);
 342:	9c 01       	movw	r18, r24
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	60 e4       	ldi	r22, 0x40	; 64
 34a:	72 e4       	ldi	r23, 0x42	; 66
 34c:	8f e0       	ldi	r24, 0x0F	; 15
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 97 07 	call	0xf2e	; 0xf2e <__udivmodsi4>
 354:	21 50       	subi	r18, 0x01	; 1
 356:	31 09       	sbc	r19, r1
 358:	30 bd       	out	0x20, r19	; 32
 35a:	29 b9       	out	0x09, r18	; 9
 35c:	88 e0       	ldi	r24, 0x08	; 8
 35e:	8a b9       	out	0x0a, r24	; 10
 360:	8e e8       	ldi	r24, 0x8E	; 142
 362:	80 bd       	out	0x20, r24	; 32
 364:	78 94       	sei
 366:	08 95       	ret

00000368 <USART_Transmit>:
 368:	5d 9b       	sbis	0x0b, 5	; 11
 36a:	fe cf       	rjmp	.-4      	; 0x368 <USART_Transmit>
 36c:	8c b9       	out	0x0c, r24	; 12
 36e:	08 95       	ret

00000370 <USART_TxString>:
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	ec 01       	movw	r28, r24
 376:	03 c0       	rjmp	.+6      	; 0x37e <USART_TxString+0xe>
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	0e 94 b4 01 	call	0x368	; 0x368 <USART_Transmit>
 37e:	88 81       	ld	r24, Y
 380:	81 11       	cpse	r24, r1
 382:	fa cf       	rjmp	.-12     	; 0x378 <USART_TxString+0x8>
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <main>:
int y3=0; //pieces  , y3=strip length
        


int main(void)
{  
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
	    
	    DDRA=0x0F;
 392:	8f e0       	ldi	r24, 0x0F	; 15
 394:	8a bb       	out	0x1a, r24	; 26
		DDRC|=(1<<2);//servo pin as output
 396:	84 b3       	in	r24, 0x14	; 20
 398:	84 60       	ori	r24, 0x04	; 4
 39a:	84 bb       	out	0x14, r24	; 20
		USART_Init(9600);
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	95 e2       	ldi	r25, 0x25	; 37
 3a0:	0e 94 a1 01 	call	0x342	; 0x342 <USART_Init>
		
	    lcd_init();
 3a4:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_init>
         

	    lcd_print("....STARTING....");
 3a8:	80 e6       	ldi	r24, 0x60	; 96
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 3b0:	2f ef       	ldi	r18, 0xFF	; 255
 3b2:	81 ee       	ldi	r24, 0xE1	; 225
 3b4:	94 e0       	ldi	r25, 0x04	; 4
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x2c>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x36>
 3c0:	00 00       	nop
	    _delay_ms(100);
	
	    lcdcmd(0x01);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
	    lcdcmd(0x0E);
 3c8:	8e e0       	ldi	r24, 0x0E	; 14
 3ca:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 3ce:	2f ef       	ldi	r18, 0xFF	; 255
 3d0:	81 ee       	ldi	r24, 0xE1	; 225
 3d2:	94 e0       	ldi	r25, 0x04	; 4
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x4a>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x54>
 3de:	00 00       	nop
	    _delay_ms(100);
		


	    lcd_print("Strip:0/Cut:1");
 3e0:	81 e7       	ldi	r24, 0x71	; 113
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
	    lcdcmd(0xC0);
 3e8:	80 ec       	ldi	r24, 0xC0	; 192
 3ea:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
		
	    do
	    {
		    PORTA=0xF0;
 3ee:	80 ef       	ldi	r24, 0xF0	; 240
 3f0:	8b bb       	out	0x1b, r24	; 27
		    if(PINA!=0xF0)
 3f2:	89 b3       	in	r24, 0x19	; 25
 3f4:	80 3f       	cpi	r24, 0xF0	; 240
 3f6:	81 f0       	breq	.+32     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		    {
			    x=keypad();     
 3f8:	0e 94 70 00 	call	0xe0	; 0xe0 <keypad>
 3fc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <x>
				
				if(x!='=')
 400:	8d 33       	cpi	r24, 0x3D	; 61
 402:	51 f0       	breq	.+20     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
				{
					y=x-'0';
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	20 53       	subi	r18, 0x30	; 48
 40a:	31 09       	sbc	r19, r1
 40c:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <y+0x1>
 410:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <y>
					lcddata(x);
 414:	0e 94 44 01 	call	0x288	; 0x288 <lcddata>
				}
		    }
	    }while(x!='=');
 418:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <x>
 41c:	8d 33       	cpi	r24, 0x3D	; 61
 41e:	39 f7       	brne	.-50     	; 0x3ee <main+0x64>
		
		lcdcmd(0x01);
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
		lcd_print("---Processing---");
 426:	8f e7       	ldi	r24, 0x7F	; 127
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 42e:	2f ef       	ldi	r18, 0xFF	; 255
 430:	85 ea       	ldi	r24, 0xA5	; 165
 432:	9e e0       	ldi	r25, 0x0E	; 14
 434:	21 50       	subi	r18, 0x01	; 1
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	90 40       	sbci	r25, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
		_delay_ms(300);
		
		//cutting mode
			
		if(y==1)   // select MODE
 440:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <y>
 444:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <y+0x1>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	91 05       	cpc	r25, r1
 44c:	09 f0       	breq	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44e:	bd c1       	rjmp	.+890    	; 0x7ca <__EEPROM_REGION_LENGTH__+0x3ca>
		{
			IR1_Initialize();
 450:	0e 94 58 00 	call	0xb0	; 0xb0 <IR1_Initialize>
			if(IR1_checking()== 0)
 454:	0e 94 5c 00 	call	0xb8	; 0xb8 <IR1_checking>
 458:	89 2b       	or	r24, r25
 45a:	c1 f4       	brne	.+48     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
			{
				lcd_print("....NO WIRE....");
 45c:	80 e9       	ldi	r24, 0x90	; 144
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
				BUZZER();
 464:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER>
				lcdcmd(0x01);
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
				lcdcmd(0x0E);
 46e:	8e e0       	ldi	r24, 0x0E	; 14
 470:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 474:	2f ef       	ldi	r18, 0xFF	; 255
 476:	81 ee       	ldi	r24, 0xE1	; 225
 478:	94 e0       	ldi	r25, 0x04	; 4
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 484:	00 00       	nop
				_delay_ms(100);
				lcdcmd(0x08);
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
			}
			
		    //Initialization Uart
			InitializationUart();
 48c:	0e 94 f5 05 	call	0xbea	; 0xbea <InitializationUart>
			
			//send data
			sentData(1);  //1- cutting mode
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 fe 05 	call	0xbfc	; 0xbfc <sentData>
			
	
			
            IR2_Initialize();
 498:	0e 94 64 00 	call	0xc8	; 0xc8 <IR2_Initialize>
            if(IR2_checking()== 1)
 49c:	0e 94 68 00 	call	0xd0	; 0xd0 <IR2_checking>
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a4:	85 c1       	rjmp	.+778    	; 0x7b0 <__EEPROM_REGION_LENGTH__+0x3b0>
			{

				label1:
				lcdcmd(0x01);
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
				lcd_print("Enter Length:");
 4ac:	80 ea       	ldi	r24, 0xA0	; 160
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	81 ee       	ldi	r24, 0xE1	; 225
 4b8:	94 e0       	ldi	r25, 0x04	; 4
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	80 40       	sbci	r24, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c4:	00 00       	nop
				_delay_ms(100);
				lcdcmd(0xC0);
 4c6:	80 ec       	ldi	r24, 0xC0	; 192
 4c8:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 4cc:	2f ef       	ldi	r18, 0xFF	; 255
 4ce:	81 ee       	ldi	r24, 0xE1	; 225
 4d0:	94 e0       	ldi	r25, 0x04	; 4
 4d2:	21 50       	subi	r18, 0x01	; 1
 4d4:	80 40       	sbci	r24, 0x00	; 0
 4d6:	90 40       	sbci	r25, 0x00	; 0
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4dc:	00 00       	nop
				_delay_ms(100);
				
				do
				{
					PORTA=0xF0;
 4de:	80 ef       	ldi	r24, 0xF0	; 240
 4e0:	8b bb       	out	0x1b, r24	; 27
					if(PINA!=0xF0)
 4e2:	89 b3       	in	r24, 0x19	; 25
 4e4:	80 3f       	cpi	r24, 0xF0	; 240
 4e6:	09 f4       	brne	.+2      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4e8:	4a c0       	rjmp	.+148    	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
					{
						x1=keypad();   
 4ea:	0e 94 70 00 	call	0xe0	; 0xe0 <keypad>
 4ee:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <x1>
						if(x1=='/' || x1=='+'  ||x1=='*' ||x1=='C' ||x1=='-')
 4f2:	8f 32       	cpi	r24, 0x2F	; 47
 4f4:	41 f0       	breq	.+16     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4f6:	8b 32       	cpi	r24, 0x2B	; 43
 4f8:	31 f0       	breq	.+12     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4fa:	8a 32       	cpi	r24, 0x2A	; 42
 4fc:	21 f0       	breq	.+8      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4fe:	83 34       	cpi	r24, 0x43	; 67
 500:	11 f0       	breq	.+4      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 502:	8d 32       	cpi	r24, 0x2D	; 45
 504:	f9 f4       	brne	.+62     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
						{
							lcdcmd(0x01);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
							lcdcmd(0x0E);
 50c:	8e e0       	ldi	r24, 0x0E	; 14
 50e:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 512:	2f ef       	ldi	r18, 0xFF	; 255
 514:	81 ee       	ldi	r24, 0xE1	; 225
 516:	94 e0       	ldi	r25, 0x04	; 4
 518:	21 50       	subi	r18, 0x01	; 1
 51a:	80 40       	sbci	r24, 0x00	; 0
 51c:	90 40       	sbci	r25, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 520:	00 c0       	rjmp	.+0      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 522:	00 00       	nop
							_delay_ms(100);
							BUZZER();
 524:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER>
							lcd_print("Invalid Input!");
 528:	8e ea       	ldi	r24, 0xAE	; 174
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	81 ee       	ldi	r24, 0xE1	; 225
 534:	94 e0       	ldi	r25, 0x04	; 4
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 540:	00 00       	nop
 542:	b1 cf       	rjmp	.-158    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
							_delay_ms(100);
							goto label1;
						}

						else if(x1!='=')
 544:	8d 33       	cpi	r24, 0x3D	; 61
 546:	d9 f0       	breq	.+54     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
						{
							y2=(y2*10)+(x1-'0');
 548:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <y2>
 54c:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <y2+0x1>
 550:	a9 01       	movw	r20, r18
 552:	44 0f       	add	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	22 0f       	add	r18, r18
 558:	33 1f       	adc	r19, r19
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	22 0f       	add	r18, r18
 560:	33 1f       	adc	r19, r19
 562:	24 0f       	add	r18, r20
 564:	35 1f       	adc	r19, r21
 566:	48 2f       	mov	r20, r24
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	40 53       	subi	r20, 0x30	; 48
 56c:	51 09       	sbc	r21, r1
 56e:	24 0f       	add	r18, r20
 570:	35 1f       	adc	r19, r21
 572:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <y2+0x1>
 576:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <y2>
							lcddata(x1);
 57a:	0e 94 44 01 	call	0x288	; 0x288 <lcddata>
						}
					}
				}while(x1!='=');
 57e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <x1>
 582:	8d 33       	cpi	r24, 0x3D	; 61
 584:	09 f0       	breq	.+2      	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 586:	ab cf       	rjmp	.-170    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
				
			
				
				if(y2<50)
 588:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <y2>
 58c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <y2+0x1>
 590:	82 33       	cpi	r24, 0x32	; 50
 592:	91 05       	cpc	r25, r1
 594:	0c f0       	brlt	.+2      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 596:	e4 c0       	rjmp	.+456    	; 0x760 <__EEPROM_REGION_LENGTH__+0x360>
				{   
					label2:
					lcdcmd(0x01);
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
					lcdcmd(0x0E);
 59e:	8e e0       	ldi	r24, 0x0E	; 14
 5a0:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	81 ee       	ldi	r24, 0xE1	; 225
 5a8:	94 e0       	ldi	r25, 0x04	; 4
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 5b4:	00 00       	nop
					_delay_ms(100);
					lcd_print("No. of pieces:");
 5b6:	8d eb       	ldi	r24, 0xBD	; 189
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 5be:	2f ef       	ldi	r18, 0xFF	; 255
 5c0:	81 ee       	ldi	r24, 0xE1	; 225
 5c2:	94 e0       	ldi	r25, 0x04	; 4
 5c4:	21 50       	subi	r18, 0x01	; 1
 5c6:	80 40       	sbci	r24, 0x00	; 0
 5c8:	90 40       	sbci	r25, 0x00	; 0
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
 5ce:	00 00       	nop
					_delay_ms(100);
					lcdcmd(0xC0);
 5d0:	80 ec       	ldi	r24, 0xC0	; 192
 5d2:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
					
					do
					{
						PORTA=0xF0;
 5d6:	80 ef       	ldi	r24, 0xF0	; 240
 5d8:	8b bb       	out	0x1b, r24	; 27
						if(PINA!=0xF0)
 5da:	89 b3       	in	r24, 0x19	; 25
 5dc:	80 3f       	cpi	r24, 0xF0	; 240
 5de:	09 f4       	brne	.+2      	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 5e0:	45 c0       	rjmp	.+138    	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
						{
							x2=keypad();     
 5e2:	0e 94 70 00 	call	0xe0	; 0xe0 <keypad>
 5e6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <x2>
							if(x2=='/' || x2=='+'  ||x2=='*' || x2=='C' ||x2=='-')
 5ea:	8f 32       	cpi	r24, 0x2F	; 47
 5ec:	41 f0       	breq	.+16     	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
 5ee:	8b 32       	cpi	r24, 0x2B	; 43
 5f0:	31 f0       	breq	.+12     	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
 5f2:	8a 32       	cpi	r24, 0x2A	; 42
 5f4:	21 f0       	breq	.+8      	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
 5f6:	83 34       	cpi	r24, 0x43	; 67
 5f8:	11 f0       	breq	.+4      	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
 5fa:	8d 32       	cpi	r24, 0x2D	; 45
 5fc:	f9 f4       	brne	.+62     	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
							{
								lcdcmd(0x01);
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
								lcdcmd(0x0E);
 604:	8e e0       	ldi	r24, 0x0E	; 14
 606:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 60a:	2f ef       	ldi	r18, 0xFF	; 255
 60c:	81 ee       	ldi	r24, 0xE1	; 225
 60e:	94 e0       	ldi	r25, 0x04	; 4
 610:	21 50       	subi	r18, 0x01	; 1
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
 618:	00 c0       	rjmp	.+0      	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 61a:	00 00       	nop
								_delay_ms(100);
								BUZZER();
 61c:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER>
								lcd_print("Invalid Input!");
 620:	8e ea       	ldi	r24, 0xAE	; 174
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 628:	2f ef       	ldi	r18, 0xFF	; 255
 62a:	81 ee       	ldi	r24, 0xE1	; 225
 62c:	94 e0       	ldi	r25, 0x04	; 4
 62e:	21 50       	subi	r18, 0x01	; 1
 630:	80 40       	sbci	r24, 0x00	; 0
 632:	90 40       	sbci	r25, 0x00	; 0
 634:	e1 f7       	brne	.-8      	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 636:	00 c0       	rjmp	.+0      	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
 638:	00 00       	nop
 63a:	ae cf       	rjmp	.-164    	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
								_delay_ms(100);
								goto label2;
							}
							else if(x2!='=')
 63c:	8d 33       	cpi	r24, 0x3D	; 61
 63e:	b1 f0       	breq	.+44     	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
							{
								y3=(y3*10)+(x2-'0');       
 640:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
 644:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__data_end+0x1>
 648:	9a e0       	ldi	r25, 0x0A	; 10
 64a:	92 9f       	mul	r25, r18
 64c:	a0 01       	movw	r20, r0
 64e:	93 9f       	mul	r25, r19
 650:	50 0d       	add	r21, r0
 652:	11 24       	eor	r1, r1
 654:	28 2f       	mov	r18, r24
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	20 53       	subi	r18, 0x30	; 48
 65a:	31 09       	sbc	r19, r1
 65c:	24 0f       	add	r18, r20
 65e:	35 1f       	adc	r19, r21
 660:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <__data_end+0x1>
 664:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <__data_end>
								lcddata(x2);
 668:	0e 94 44 01 	call	0x288	; 0x288 <lcddata>
							}
						}
					}while(x2!='=');
 66c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <x2>
 670:	8d 33       	cpi	r24, 0x3D	; 61
 672:	09 f0       	breq	.+2      	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 674:	b0 cf       	rjmp	.-160    	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
					
					lcdcmd(0x01);
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
					lcd_print("---Processing---");
 67c:	8f e7       	ldi	r24, 0x7F	; 127
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 684:	2f ef       	ldi	r18, 0xFF	; 255
 686:	85 ea       	ldi	r24, 0xA5	; 165
 688:	9e e0       	ldi	r25, 0x0E	; 14
 68a:	21 50       	subi	r18, 0x01	; 1
 68c:	80 40       	sbci	r24, 0x00	; 0
 68e:	90 40       	sbci	r25, 0x00	; 0
 690:	e1 f7       	brne	.-8      	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
 692:	00 c0       	rjmp	.+0      	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
 694:	00 00       	nop
					_delay_ms(300);
					lcdcmd(0x01);
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
					lcd_print("--Data Accepted--");
 69c:	8c ec       	ldi	r24, 0xCC	; 204
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 6a4:	2f ef       	ldi	r18, 0xFF	; 255
 6a6:	85 ea       	ldi	r24, 0xA5	; 165
 6a8:	9e e0       	ldi	r25, 0x0E	; 14
 6aa:	21 50       	subi	r18, 0x01	; 1
 6ac:	80 40       	sbci	r24, 0x00	; 0
 6ae:	90 40       	sbci	r25, 0x00	; 0
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <__EEPROM_REGION_LENGTH__+0x2b4>
 6b4:	00 00       	nop
					_delay_ms(300);
					
					
					Stepper1_Initialize();
 6b6:	0e 94 64 05 	call	0xac8	; 0xac8 <Stepper1_Initialize>
					Stepper2_Initialize();
 6ba:	0e 94 89 05 	call	0xb12	; 0xb12 <Stepper2_Initialize>
					HCSR04Init();
 6be:	0e 94 02 06 	call	0xc04	; 0xc04 <HCSR04Init>

					for (int j=0;j<y3;j++)
 6c2:	00 e0       	ldi	r16, 0x00	; 0
 6c4:	10 e0       	ldi	r17, 0x00	; 0
 6c6:	43 c0       	rjmp	.+134    	; 0x74e <__EEPROM_REGION_LENGTH__+0x34e>
					{

                        for (int i=0; i<y2*10;i++)
                        {
						    Stepper1_rotate(); //measuring
 6c8:	0e 94 68 05 	call	0xad0	; 0xad0 <Stepper1_rotate>
					HCSR04Init();

					for (int j=0;j<y3;j++)
					{

                        for (int i=0; i<y2*10;i++)
 6cc:	21 96       	adiw	r28, 0x01	; 1
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
 6d0:	c0 e0       	ldi	r28, 0x00	; 0
 6d2:	d0 e0       	ldi	r29, 0x00	; 0
 6d4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <y2>
 6d8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <y2+0x1>
 6dc:	9c 01       	movw	r18, r24
 6de:	22 0f       	add	r18, r18
 6e0:	33 1f       	adc	r19, r19
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	82 0f       	add	r24, r18
 6f0:	93 1f       	adc	r25, r19
 6f2:	c8 17       	cp	r28, r24
 6f4:	d9 07       	cpc	r29, r25
 6f6:	44 f3       	brlt	.-48     	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
 6f8:	2f ef       	ldi	r18, 0xFF	; 255
 6fa:	81 ee       	ldi	r24, 0xE1	; 225
 6fc:	94 e0       	ldi	r25, 0x04	; 4
 6fe:	21 50       	subi	r18, 0x01	; 1
 700:	80 40       	sbci	r24, 0x00	; 0
 702:	90 40       	sbci	r25, 0x00	; 0
 704:	e1 f7       	brne	.-8      	; 0x6fe <__EEPROM_REGION_LENGTH__+0x2fe>
 706:	00 c0       	rjmp	.+0      	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
 708:	00 00       	nop
 70a:	02 c0       	rjmp	.+4      	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>

                        _delay_ms(100);

                        while(calculate()<10)
						{
                            Stepper2_rotatedown();      //blade down
 70c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <Stepper2_rotatedown>
						    Stepper1_rotate(); //measuring
						}

                        _delay_ms(100);

                        while(calculate()<10)
 710:	0e 94 45 06 	call	0xc8a	; 0xc8a <calculate>
 714:	0a 97       	sbiw	r24, 0x0a	; 10
 716:	d4 f3       	brlt	.-12     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
 718:	2f ef       	ldi	r18, 0xFF	; 255
 71a:	81 ee       	ldi	r24, 0xE1	; 225
 71c:	94 e0       	ldi	r25, 0x04	; 4
 71e:	21 50       	subi	r18, 0x01	; 1
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <__EEPROM_REGION_LENGTH__+0x31e>
 726:	00 c0       	rjmp	.+0      	; 0x728 <__EEPROM_REGION_LENGTH__+0x328>
 728:	00 00       	nop
 72a:	02 c0       	rjmp	.+4      	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
	                    }
                        _delay_ms(100);

                        while (calculate()>3)
						{
	                        Stepper1_rotateUp();                       //blade up
 72c:	0e 94 c1 05 	call	0xb82	; 0xb82 <Stepper1_rotateUp>
						{
                            Stepper2_rotatedown();      //blade down
	                    }
                        _delay_ms(100);

                        while (calculate()>3)
 730:	0e 94 45 06 	call	0xc8a	; 0xc8a <calculate>
 734:	04 97       	sbiw	r24, 0x04	; 4
 736:	d4 f7       	brge	.-12     	; 0x72c <__EEPROM_REGION_LENGTH__+0x32c>
 738:	2f ef       	ldi	r18, 0xFF	; 255
 73a:	85 ea       	ldi	r24, 0xA5	; 165
 73c:	9e e0       	ldi	r25, 0x0E	; 14
 73e:	21 50       	subi	r18, 0x01	; 1
 740:	80 40       	sbci	r24, 0x00	; 0
 742:	90 40       	sbci	r25, 0x00	; 0
 744:	e1 f7       	brne	.-8      	; 0x73e <__EEPROM_REGION_LENGTH__+0x33e>
 746:	00 c0       	rjmp	.+0      	; 0x748 <__EEPROM_REGION_LENGTH__+0x348>
 748:	00 00       	nop
					
					Stepper1_Initialize();
					Stepper2_Initialize();
					HCSR04Init();

					for (int j=0;j<y3;j++)
 74a:	0f 5f       	subi	r16, 0xFF	; 255
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 752:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 756:	08 17       	cp	r16, r24
 758:	19 07       	cpc	r17, r25
 75a:	0c f4       	brge	.+2      	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
 75c:	b9 cf       	rjmp	.-142    	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
 75e:	67 c1       	rjmp	.+718    	; 0xa2e <__stack+0x1cf>
			       }
                        
                     
				} 
				
				else if(y2>=50)
 760:	c2 97       	sbiw	r24, 0x32	; 50
 762:	2c f4       	brge	.+10     	; 0x76e <__EEPROM_REGION_LENGTH__+0x36e>
 764:	64 c1       	rjmp	.+712    	; 0xa2e <__stack+0x1cf>
           	    {
           	   	    //rotate steppermotor1 according to length;   
				    for (int i=0; i<y2*10;i++)
                    {
				        Stepper1_rotate();//measuring
 766:	0e 94 68 05 	call	0xad0	; 0xad0 <Stepper1_rotate>
				} 
				
				else if(y2>=50)
           	    {
           	   	    //rotate steppermotor1 according to length;   
				    for (int i=0; i<y2*10;i++)
 76a:	21 96       	adiw	r28, 0x01	; 1
 76c:	02 c0       	rjmp	.+4      	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
 76e:	c0 e0       	ldi	r28, 0x00	; 0
 770:	d0 e0       	ldi	r29, 0x00	; 0
 772:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <y2>
 776:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <y2+0x1>
 77a:	4a e0       	ldi	r20, 0x0A	; 10
 77c:	42 9f       	mul	r20, r18
 77e:	c0 01       	movw	r24, r0
 780:	43 9f       	mul	r20, r19
 782:	90 0d       	add	r25, r0
 784:	11 24       	eor	r1, r1
 786:	c8 17       	cp	r28, r24
 788:	d9 07       	cpc	r29, r25
 78a:	6c f3       	brlt	.-38     	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
				        Stepper1_rotate();//measuring
					}
                    

						while(1){
							if (PIND&(1<<4))// check ir pin
 78c:	84 9b       	sbis	0x10, 4	; 16
 78e:	08 c0       	rjmp	.+16     	; 0x7a0 <__EEPROM_REGION_LENGTH__+0x3a0>
							{
								servoangle(0);
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	0e 94 1e 05 	call	0xa3c	; 0xa3c <servoangle>
								USART_TxString("A");  //send data
 796:	8e ed       	ldi	r24, 0xDE	; 222
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 b8 01 	call	0x370	; 0x370 <USART_TxString>
 79e:	f6 cf       	rjmp	.-20     	; 0x78c <__EEPROM_REGION_LENGTH__+0x38c>
								
								
							}
							else
							{
								servoangle(1);USART_TxString("B");
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <servoangle>
 7a6:	80 ee       	ldi	r24, 0xE0	; 224
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 b8 01 	call	0x370	; 0x370 <USART_TxString>
 7ae:	ee cf       	rjmp	.-36     	; 0x78c <__EEPROM_REGION_LENGTH__+0x38c>
           	   }
		    }

			else  //(IR1==0)
       	    {  
				   lcdcmd(0x01);
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
				   lcd_print("-----ERROR-----");
 7b6:	82 ee       	ldi	r24, 0xE2	; 226
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
				   BUZZER();
 7be:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER>
				   lcdcmd(0x08);        
 7c2:	88 e0       	ldi	r24, 0x08	; 8
 7c4:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 7c8:	32 c1       	rjmp	.+612    	; 0xa2e <__stack+0x1cf>
            }

		}
			
	    //stripping mode
		else if (y==0)
 7ca:	89 2b       	or	r24, r25
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <__EEPROM_REGION_LENGTH__+0x3d0>
 7ce:	1a c1       	rjmp	.+564    	; 0xa04 <__stack+0x1a5>
		{   
			//Initialization Uart
			InitializationUart();
 7d0:	0e 94 f5 05 	call	0xbea	; 0xbea <InitializationUart>
			
			//send data
			sentData(0);  // 0 -stripping mode
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <sentData>
			
			label3:
			lcdcmd(0x01);
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
			lcd_print("Strip height:");
 7e2:	82 ef       	ldi	r24, 0xF2	; 242
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 7ea:	2f ef       	ldi	r18, 0xFF	; 255
 7ec:	81 ee       	ldi	r24, 0xE1	; 225
 7ee:	94 e0       	ldi	r25, 0x04	; 4
 7f0:	21 50       	subi	r18, 0x01	; 1
 7f2:	80 40       	sbci	r24, 0x00	; 0
 7f4:	90 40       	sbci	r25, 0x00	; 0
 7f6:	e1 f7       	brne	.-8      	; 0x7f0 <__EEPROM_REGION_LENGTH__+0x3f0>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <__EEPROM_REGION_LENGTH__+0x3fa>
 7fa:	00 00       	nop
			_delay_ms(100);
			lcdcmd(0xC0);
 7fc:	80 ec       	ldi	r24, 0xC0	; 192
 7fe:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
				
			do
			{
				PORTA=0xF0;
 802:	80 ef       	ldi	r24, 0xF0	; 240
 804:	8b bb       	out	0x1b, r24	; 27
				if(PINA!=0xF0)
 806:	89 b3       	in	r24, 0x19	; 25
 808:	80 3f       	cpi	r24, 0xF0	; 240
 80a:	09 f4       	brne	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80c:	4a c0       	rjmp	.+148    	; 0x8a2 <__stack+0x43>
				{
					x1=keypad();    
 80e:	0e 94 70 00 	call	0xe0	; 0xe0 <keypad>
 812:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <x1>
					if(x1=='/' || x1=='+'  ||x1=='*' || x1=='C' ||x1=='-')
 816:	8f 32       	cpi	r24, 0x2F	; 47
 818:	41 f0       	breq	.+16     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81a:	8b 32       	cpi	r24, 0x2B	; 43
 81c:	31 f0       	breq	.+12     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81e:	8a 32       	cpi	r24, 0x2A	; 42
 820:	21 f0       	breq	.+8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 822:	83 34       	cpi	r24, 0x43	; 67
 824:	11 f0       	breq	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	8d 32       	cpi	r24, 0x2D	; 45
 828:	f9 f4       	brne	.+62     	; 0x868 <__stack+0x9>
					{
						lcdcmd(0x01);
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
						lcdcmd(0x0E);
 830:	8e e0       	ldi	r24, 0x0E	; 14
 832:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 836:	2f ef       	ldi	r18, 0xFF	; 255
 838:	81 ee       	ldi	r24, 0xE1	; 225
 83a:	94 e0       	ldi	r25, 0x04	; 4
 83c:	21 50       	subi	r18, 0x01	; 1
 83e:	80 40       	sbci	r24, 0x00	; 0
 840:	90 40       	sbci	r25, 0x00	; 0
 842:	e1 f7       	brne	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 844:	00 c0       	rjmp	.+0      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 846:	00 00       	nop
						_delay_ms(100);
						BUZZER();
 848:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER>
						lcd_print("Invalid Input!");
 84c:	8e ea       	ldi	r24, 0xAE	; 174
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 854:	2f ef       	ldi	r18, 0xFF	; 255
 856:	81 ee       	ldi	r24, 0xE1	; 225
 858:	94 e0       	ldi	r25, 0x04	; 4
 85a:	21 50       	subi	r18, 0x01	; 1
 85c:	80 40       	sbci	r24, 0x00	; 0
 85e:	90 40       	sbci	r25, 0x00	; 0
 860:	e1 f7       	brne	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
 864:	00 00       	nop
 866:	ba cf       	rjmp	.-140    	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
						_delay_ms(100);
						goto label3;
					}  
					else if(x1!='=')
 868:	8d 33       	cpi	r24, 0x3D	; 61
 86a:	d9 f0       	breq	.+54     	; 0x8a2 <__stack+0x43>
					{
						y2=(y2*10)+(x1-'0');        
 86c:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <y2>
 870:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <y2+0x1>
 874:	a9 01       	movw	r20, r18
 876:	44 0f       	add	r20, r20
 878:	55 1f       	adc	r21, r21
 87a:	22 0f       	add	r18, r18
 87c:	33 1f       	adc	r19, r19
 87e:	22 0f       	add	r18, r18
 880:	33 1f       	adc	r19, r19
 882:	22 0f       	add	r18, r18
 884:	33 1f       	adc	r19, r19
 886:	24 0f       	add	r18, r20
 888:	35 1f       	adc	r19, r21
 88a:	48 2f       	mov	r20, r24
 88c:	50 e0       	ldi	r21, 0x00	; 0
 88e:	40 53       	subi	r20, 0x30	; 48
 890:	51 09       	sbc	r21, r1
 892:	24 0f       	add	r18, r20
 894:	35 1f       	adc	r19, r21
 896:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <y2+0x1>
 89a:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <y2>
						lcddata(x1);
 89e:	0e 94 44 01 	call	0x288	; 0x288 <lcddata>
					}
	
				}
			}while(x1!='=');
 8a2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <x1>
 8a6:	8d 33       	cpi	r24, 0x3D	; 61
 8a8:	09 f0       	breq	.+2      	; 0x8ac <__stack+0x4d>
 8aa:	ab cf       	rjmp	.-170    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
				
				
			label5:	
			lcdcmd(0x01);
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
			lcdcmd(0x0E);
 8b2:	8e e0       	ldi	r24, 0x0E	; 14
 8b4:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 8b8:	2f ef       	ldi	r18, 0xFF	; 255
 8ba:	81 ee       	ldi	r24, 0xE1	; 225
 8bc:	94 e0       	ldi	r25, 0x04	; 4
 8be:	21 50       	subi	r18, 0x01	; 1
 8c0:	80 40       	sbci	r24, 0x00	; 0
 8c2:	90 40       	sbci	r25, 0x00	; 0
 8c4:	e1 f7       	brne	.-8      	; 0x8be <__stack+0x5f>
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__stack+0x69>
 8c8:	00 00       	nop
			_delay_ms(100);
			lcd_print("Strip length:");
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	91 e0       	ldi	r25, 0x01	; 1
 8ce:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 8d2:	2f ef       	ldi	r18, 0xFF	; 255
 8d4:	81 ee       	ldi	r24, 0xE1	; 225
 8d6:	94 e0       	ldi	r25, 0x04	; 4
 8d8:	21 50       	subi	r18, 0x01	; 1
 8da:	80 40       	sbci	r24, 0x00	; 0
 8dc:	90 40       	sbci	r25, 0x00	; 0
 8de:	e1 f7       	brne	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <__stack+0x83>
 8e2:	00 00       	nop
			_delay_ms(100);
			lcdcmd(0xC0);
 8e4:	80 ec       	ldi	r24, 0xC0	; 192
 8e6:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
				
			do
			{
				PORTA=0xF0;
 8ea:	80 ef       	ldi	r24, 0xF0	; 240
 8ec:	8b bb       	out	0x1b, r24	; 27
				if(PINA!=0xF0)
 8ee:	89 b3       	in	r24, 0x19	; 25
 8f0:	80 3f       	cpi	r24, 0xF0	; 240
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <__stack+0x97>
 8f4:	4a c0       	rjmp	.+148    	; 0x98a <__stack+0x12b>
				{
					x2=keypad();     
 8f6:	0e 94 70 00 	call	0xe0	; 0xe0 <keypad>
 8fa:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <x2>
					if(x2=='/' || x2=='+' ||x2=='*' || x2=='C'||x2=='-')
 8fe:	8f 32       	cpi	r24, 0x2F	; 47
 900:	41 f0       	breq	.+16     	; 0x912 <__stack+0xb3>
 902:	8b 32       	cpi	r24, 0x2B	; 43
 904:	31 f0       	breq	.+12     	; 0x912 <__stack+0xb3>
 906:	8a 32       	cpi	r24, 0x2A	; 42
 908:	21 f0       	breq	.+8      	; 0x912 <__stack+0xb3>
 90a:	83 34       	cpi	r24, 0x43	; 67
 90c:	11 f0       	breq	.+4      	; 0x912 <__stack+0xb3>
 90e:	8d 32       	cpi	r24, 0x2D	; 45
 910:	f9 f4       	brne	.+62     	; 0x950 <__stack+0xf1>
					{
						lcdcmd(0x01);
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
						lcdcmd(0x0E);
 918:	8e e0       	ldi	r24, 0x0E	; 14
 91a:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
 91e:	2f ef       	ldi	r18, 0xFF	; 255
 920:	81 ee       	ldi	r24, 0xE1	; 225
 922:	94 e0       	ldi	r25, 0x04	; 4
 924:	21 50       	subi	r18, 0x01	; 1
 926:	80 40       	sbci	r24, 0x00	; 0
 928:	90 40       	sbci	r25, 0x00	; 0
 92a:	e1 f7       	brne	.-8      	; 0x924 <__stack+0xc5>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0xcf>
 92e:	00 00       	nop
						_delay_ms(100);
						BUZZER();
 930:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER>
						lcd_print("Invalid Input!");
 934:	8e ea       	ldi	r24, 0xAE	; 174
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 93c:	2f ef       	ldi	r18, 0xFF	; 255
 93e:	81 ee       	ldi	r24, 0xE1	; 225
 940:	94 e0       	ldi	r25, 0x04	; 4
 942:	21 50       	subi	r18, 0x01	; 1
 944:	80 40       	sbci	r24, 0x00	; 0
 946:	90 40       	sbci	r25, 0x00	; 0
 948:	e1 f7       	brne	.-8      	; 0x942 <__stack+0xe3>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <__stack+0xed>
 94c:	00 00       	nop
 94e:	ae cf       	rjmp	.-164    	; 0x8ac <__stack+0x4d>
						_delay_ms(100);
						goto label5;
					}
					else if(x2!='=')
 950:	8d 33       	cpi	r24, 0x3D	; 61
 952:	d9 f0       	breq	.+54     	; 0x98a <__stack+0x12b>
					{
						y3=(y3*10)+(x2-'0');        
 954:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
 958:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__data_end+0x1>
 95c:	a9 01       	movw	r20, r18
 95e:	44 0f       	add	r20, r20
 960:	55 1f       	adc	r21, r21
 962:	22 0f       	add	r18, r18
 964:	33 1f       	adc	r19, r19
 966:	22 0f       	add	r18, r18
 968:	33 1f       	adc	r19, r19
 96a:	22 0f       	add	r18, r18
 96c:	33 1f       	adc	r19, r19
 96e:	24 0f       	add	r18, r20
 970:	35 1f       	adc	r19, r21
 972:	48 2f       	mov	r20, r24
 974:	50 e0       	ldi	r21, 0x00	; 0
 976:	40 53       	subi	r20, 0x30	; 48
 978:	51 09       	sbc	r21, r1
 97a:	24 0f       	add	r18, r20
 97c:	35 1f       	adc	r19, r21
 97e:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <__data_end+0x1>
 982:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <__data_end>
						lcddata(x2);
 986:	0e 94 44 01 	call	0x288	; 0x288 <lcddata>
					}
				}
			}while(x2!='=');
 98a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <x2>
 98e:	8d 33       	cpi	r24, 0x3D	; 61
 990:	09 f0       	breq	.+2      	; 0x994 <__stack+0x135>
 992:	ab cf       	rjmp	.-170    	; 0x8ea <__stack+0x8b>
					
			lcdcmd(0x01);
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
			lcd_print("---Processing---");
 99a:	8f e7       	ldi	r24, 0x7F	; 127
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 9a2:	2f ef       	ldi	r18, 0xFF	; 255
 9a4:	85 ea       	ldi	r24, 0xA5	; 165
 9a6:	9e e0       	ldi	r25, 0x0E	; 14
 9a8:	21 50       	subi	r18, 0x01	; 1
 9aa:	80 40       	sbci	r24, 0x00	; 0
 9ac:	90 40       	sbci	r25, 0x00	; 0
 9ae:	e1 f7       	brne	.-8      	; 0x9a8 <__stack+0x149>
 9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <__stack+0x153>
 9b2:	00 00       	nop
			_delay_ms(300);
			lcdcmd(0x01);
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
			lcd_print("-Data Accepted-");
 9ba:	8e e0       	ldi	r24, 0x0E	; 14
 9bc:	91 e0       	ldi	r25, 0x01	; 1
 9be:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
 9c2:	2f ef       	ldi	r18, 0xFF	; 255
 9c4:	85 ea       	ldi	r24, 0xA5	; 165
 9c6:	9e e0       	ldi	r25, 0x0E	; 14
 9c8:	21 50       	subi	r18, 0x01	; 1
 9ca:	80 40       	sbci	r24, 0x00	; 0
 9cc:	90 40       	sbci	r25, 0x00	; 0
 9ce:	e1 f7       	brne	.-8      	; 0x9c8 <__stack+0x169>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <__stack+0x173>
 9d2:	00 00       	nop
			_delay_ms(300);
          
           //Initialization Uart
			InitializationUart();
 9d4:	0e 94 f5 05 	call	0xbea	; 0xbea <InitializationUart>
				
			//send data
			sentData(y2);
 9d8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <y2>
 9dc:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <y2+0x1>
 9e0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <sentData>
 9e4:	2f ef       	ldi	r18, 0xFF	; 255
 9e6:	89 e6       	ldi	r24, 0x69	; 105
 9e8:	98 e1       	ldi	r25, 0x18	; 24
 9ea:	21 50       	subi	r18, 0x01	; 1
 9ec:	80 40       	sbci	r24, 0x00	; 0
 9ee:	90 40       	sbci	r25, 0x00	; 0
 9f0:	e1 f7       	brne	.-8      	; 0x9ea <__stack+0x18b>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <__stack+0x195>
 9f4:	00 00       	nop
				
			_delay_ms(500);
				
			//send data
			sentData(y3);  
 9f6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 9fa:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 9fe:	0e 94 fe 05 	call	0xbfc	; 0xbfc <sentData>
 a02:	15 c0       	rjmp	.+42     	; 0xa2e <__stack+0x1cf>
		}
			
		//invalid mode
		else
		{
			lcdcmd(0x01);
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
			lcd_print("-Can't Accept-");
 a0a:	8e e1       	ldi	r24, 0x1E	; 30
 a0c:	91 e0       	ldi	r25, 0x01	; 1
 a0e:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_print>
			BUZZER();
 a12:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER>
 a16:	2f ef       	ldi	r18, 0xFF	; 255
 a18:	81 ee       	ldi	r24, 0xE1	; 225
 a1a:	94 e0       	ldi	r25, 0x04	; 4
 a1c:	21 50       	subi	r18, 0x01	; 1
 a1e:	80 40       	sbci	r24, 0x00	; 0
 a20:	90 40       	sbci	r25, 0x00	; 0
 a22:	e1 f7       	brne	.-8      	; 0xa1c <__stack+0x1bd>
 a24:	00 c0       	rjmp	.+0      	; 0xa26 <__stack+0x1c7>
 a26:	00 00       	nop
			_delay_ms(100);
	        lcdcmd(0x08);
 a28:	88 e0       	ldi	r24, 0x08	; 8
 a2a:	0e 94 19 01 	call	0x232	; 0x232 <lcdcmd>
		}
	
	return 0;
}
 a2e:	80 e0       	ldi	r24, 0x00	; 0
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	df 91       	pop	r29
 a34:	cf 91       	pop	r28
 a36:	1f 91       	pop	r17
 a38:	0f 91       	pop	r16
 a3a:	08 95       	ret

00000a3c <servoangle>:

//Initialize PC2 as output
void Servo_Initialize(){
	DDRC =0x04;
	PORTC = 0x00;
}
 a3c:	81 11       	cpse	r24, r1
 a3e:	20 c0       	rjmp	.+64     	; 0xa80 <servoangle+0x44>
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	3f c0       	rjmp	.+126    	; 0xac2 <servoangle+0x86>

//Rotate Motor
void Servo_Rotate(){
 a44:	85 b3       	in	r24, 0x15	; 21
 a46:	84 60       	ori	r24, 0x04	; 4
 a48:	85 bb       	out	0x15, r24	; 21
		//Rotate Motor to 0 degree
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	07 c0       	rjmp	.+14     	; 0xa5c <servoangle+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a4e:	ef e8       	ldi	r30, 0x8F	; 143
 a50:	f1 e0       	ldi	r31, 0x01	; 1
 a52:	31 97       	sbiw	r30, 0x01	; 1
 a54:	f1 f7       	brne	.-4      	; 0xa52 <servoangle+0x16>
 a56:	00 c0       	rjmp	.+0      	; 0xa58 <servoangle+0x1c>
 a58:	00 00       	nop
 a5a:	8f 5f       	subi	r24, 0xFF	; 255
 a5c:	89 30       	cpi	r24, 0x09	; 9
 a5e:	b8 f3       	brcs	.-18     	; 0xa4e <servoangle+0x12>
		PORTC = 0x04;
		_delay_us(1000);
		PORTC = 0x00;
 a60:	85 b3       	in	r24, 0x15	; 21
 a62:	8b 7f       	andi	r24, 0xFB	; 251
 a64:	85 bb       	out	0x15, r24	; 21

		_delay_ms(2000);

		//Rotate Motor to 90 degree
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	07 c0       	rjmp	.+14     	; 0xa78 <servoangle+0x3c>
 a6a:	ef e8       	ldi	r30, 0x8F	; 143
 a6c:	f1 e0       	ldi	r31, 0x01	; 1
 a6e:	31 97       	sbiw	r30, 0x01	; 1
 a70:	f1 f7       	brne	.-4      	; 0xa6e <servoangle+0x32>
 a72:	00 c0       	rjmp	.+0      	; 0xa74 <servoangle+0x38>
 a74:	00 00       	nop
 a76:	8f 5f       	subi	r24, 0xFF	; 255
 a78:	89 30       	cpi	r24, 0x09	; 9
 a7a:	b8 f3       	brcs	.-18     	; 0xa6a <servoangle+0x2e>
void Servo_Initialize(){
	DDRC =0x04;
	PORTC = 0x00;
}

//Rotate Motor
 a7c:	9f 5f       	subi	r25, 0xFF	; 255
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <servoangle+0x46>
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	94 36       	cpi	r25, 0x64	; 100
 a84:	f8 f2       	brcs	.-66     	; 0xa44 <servoangle+0x8>
 a86:	08 95       	ret
		_delay_ms(2000);

		/*PORTC |= (1<<PC1);   //Rotate Motor to 180 degree
		_delay_us(2000);
		PORTC &= ~(1<<PC1);
		_delay_ms(2000);*/
 a88:	85 b3       	in	r24, 0x15	; 21
 a8a:	84 60       	ori	r24, 0x04	; 4
 a8c:	85 bb       	out	0x15, r24	; 21
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 a90:	07 c0       	rjmp	.+14     	; 0xaa0 <servoangle+0x64>
 a92:	e7 ec       	ldi	r30, 0xC7	; 199
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	31 97       	sbiw	r30, 0x01	; 1
 a98:	f1 f7       	brne	.-4      	; 0xa96 <servoangle+0x5a>
 a9a:	00 c0       	rjmp	.+0      	; 0xa9c <servoangle+0x60>
 a9c:	00 00       	nop
 a9e:	8f 5f       	subi	r24, 0xFF	; 255
 aa0:	8c 31       	cpi	r24, 0x1C	; 28
 aa2:	b8 f3       	brcs	.-18     	; 0xa92 <servoangle+0x56>
 aa4:	85 b3       	in	r24, 0x15	; 21
 aa6:	8b 7f       	andi	r24, 0xFB	; 251
 aa8:	85 bb       	out	0x15, r24	; 21
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	07 c0       	rjmp	.+14     	; 0xabc <servoangle+0x80>
 aae:	e7 ec       	ldi	r30, 0xC7	; 199
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	31 97       	sbiw	r30, 0x01	; 1
 ab4:	f1 f7       	brne	.-4      	; 0xab2 <servoangle+0x76>
 ab6:	00 c0       	rjmp	.+0      	; 0xab8 <servoangle+0x7c>
 ab8:	00 00       	nop
 aba:	8f 5f       	subi	r24, 0xFF	; 255
 abc:	8c 31       	cpi	r24, 0x1C	; 28
 abe:	b8 f3       	brcs	.-18     	; 0xaae <servoangle+0x72>
		PORTC = 0x00;

		_delay_ms(2000);

		/*PORTC |= (1<<PC1);   //Rotate Motor to 180 degree
		_delay_us(2000);
 ac0:	9f 5f       	subi	r25, 0xFF	; 255
 ac2:	94 36       	cpi	r25, 0x64	; 100
 ac4:	08 f3       	brcs	.-62     	; 0xa88 <servoangle+0x4c>
 ac6:	08 95       	ret

00000ac8 <Stepper1_Initialize>:
 */ 
#include "Stepper1.h"

void Stepper1_Initialize(){
	
	DDRC |=0xF0;		/* Make PORTC higher pins as output */
 ac8:	84 b3       	in	r24, 0x14	; 20
 aca:	80 6f       	ori	r24, 0xF0	; 240
 acc:	84 bb       	out	0x14, r24	; 20
 ace:	08 95       	ret

00000ad0 <Stepper1_rotate>:
	
}

void Stepper1_rotate(){
	int period=10;
	PORTC = 0x90;
 ad0:	80 e9       	ldi	r24, 0x90	; 144
 ad2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ad4:	8f e9       	ldi	r24, 0x9F	; 159
 ad6:	9f e0       	ldi	r25, 0x0F	; 15
 ad8:	01 97       	sbiw	r24, 0x01	; 1
 ada:	f1 f7       	brne	.-4      	; 0xad8 <Stepper1_rotate+0x8>
 adc:	00 c0       	rjmp	.+0      	; 0xade <Stepper1_rotate+0xe>
 ade:	00 00       	nop
	_delay_ms(period);
	PORTC = 0xC0;
 ae0:	80 ec       	ldi	r24, 0xC0	; 192
 ae2:	85 bb       	out	0x15, r24	; 21
 ae4:	8f e9       	ldi	r24, 0x9F	; 159
 ae6:	9f e0       	ldi	r25, 0x0F	; 15
 ae8:	01 97       	sbiw	r24, 0x01	; 1
 aea:	f1 f7       	brne	.-4      	; 0xae8 <Stepper1_rotate+0x18>
 aec:	00 c0       	rjmp	.+0      	; 0xaee <Stepper1_rotate+0x1e>
 aee:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x60;
 af0:	80 e6       	ldi	r24, 0x60	; 96
 af2:	85 bb       	out	0x15, r24	; 21
 af4:	8f e9       	ldi	r24, 0x9F	; 159
 af6:	9f e0       	ldi	r25, 0x0F	; 15
 af8:	01 97       	sbiw	r24, 0x01	; 1
 afa:	f1 f7       	brne	.-4      	; 0xaf8 <Stepper1_rotate+0x28>
 afc:	00 c0       	rjmp	.+0      	; 0xafe <Stepper1_rotate+0x2e>
 afe:	00 00       	nop
	_delay_ms(period);
	PORTC = 0x30;
 b00:	80 e3       	ldi	r24, 0x30	; 48
 b02:	85 bb       	out	0x15, r24	; 21
 b04:	8f e9       	ldi	r24, 0x9F	; 159
 b06:	9f e0       	ldi	r25, 0x0F	; 15
 b08:	01 97       	sbiw	r24, 0x01	; 1
 b0a:	f1 f7       	brne	.-4      	; 0xb08 <Stepper1_rotate+0x38>
 b0c:	00 c0       	rjmp	.+0      	; 0xb0e <Stepper1_rotate+0x3e>
 b0e:	00 00       	nop
 b10:	08 95       	ret

00000b12 <Stepper2_Initialize>:
 b12:	87 b3       	in	r24, 0x17	; 23
 b14:	8f 60       	ori	r24, 0x0F	; 15
 b16:	87 bb       	out	0x17, r24	; 23
 b18:	08 95       	ret

00000b1a <Stepper2_rotatedown>:
 b1a:	80 e0       	ldi	r24, 0x00	; 0
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	2d c0       	rjmp	.+90     	; 0xb7a <Stepper2_rotatedown+0x60>
 b20:	29 e0       	ldi	r18, 0x09	; 9
 b22:	28 bb       	out	0x18, r18	; 24
 b24:	2f ef       	ldi	r18, 0xFF	; 255
 b26:	31 ee       	ldi	r19, 0xE1	; 225
 b28:	44 e0       	ldi	r20, 0x04	; 4
 b2a:	21 50       	subi	r18, 0x01	; 1
 b2c:	30 40       	sbci	r19, 0x00	; 0
 b2e:	40 40       	sbci	r20, 0x00	; 0
 b30:	e1 f7       	brne	.-8      	; 0xb2a <Stepper2_rotatedown+0x10>
 b32:	00 c0       	rjmp	.+0      	; 0xb34 <Stepper2_rotatedown+0x1a>
 b34:	00 00       	nop
 b36:	2c e0       	ldi	r18, 0x0C	; 12
 b38:	22 bb       	out	0x12, r18	; 18
 b3a:	2f ef       	ldi	r18, 0xFF	; 255
 b3c:	31 ee       	ldi	r19, 0xE1	; 225
 b3e:	44 e0       	ldi	r20, 0x04	; 4
 b40:	21 50       	subi	r18, 0x01	; 1
 b42:	30 40       	sbci	r19, 0x00	; 0
 b44:	40 40       	sbci	r20, 0x00	; 0
 b46:	e1 f7       	brne	.-8      	; 0xb40 <Stepper2_rotatedown+0x26>
 b48:	00 c0       	rjmp	.+0      	; 0xb4a <Stepper2_rotatedown+0x30>
 b4a:	00 00       	nop
 b4c:	26 e0       	ldi	r18, 0x06	; 6
 b4e:	22 bb       	out	0x12, r18	; 18
 b50:	2f ef       	ldi	r18, 0xFF	; 255
 b52:	31 ee       	ldi	r19, 0xE1	; 225
 b54:	44 e0       	ldi	r20, 0x04	; 4
 b56:	21 50       	subi	r18, 0x01	; 1
 b58:	30 40       	sbci	r19, 0x00	; 0
 b5a:	40 40       	sbci	r20, 0x00	; 0
 b5c:	e1 f7       	brne	.-8      	; 0xb56 <Stepper2_rotatedown+0x3c>
 b5e:	00 c0       	rjmp	.+0      	; 0xb60 <Stepper2_rotatedown+0x46>
 b60:	00 00       	nop
 b62:	23 e0       	ldi	r18, 0x03	; 3
 b64:	22 bb       	out	0x12, r18	; 18
 b66:	2f ef       	ldi	r18, 0xFF	; 255
 b68:	31 ee       	ldi	r19, 0xE1	; 225
 b6a:	44 e0       	ldi	r20, 0x04	; 4
 b6c:	21 50       	subi	r18, 0x01	; 1
 b6e:	30 40       	sbci	r19, 0x00	; 0
 b70:	40 40       	sbci	r20, 0x00	; 0
 b72:	e1 f7       	brne	.-8      	; 0xb6c <Stepper2_rotatedown+0x52>
 b74:	00 c0       	rjmp	.+0      	; 0xb76 <Stepper2_rotatedown+0x5c>
 b76:	00 00       	nop
 b78:	01 96       	adiw	r24, 0x01	; 1
 b7a:	18 16       	cp	r1, r24
 b7c:	19 06       	cpc	r1, r25
 b7e:	84 f6       	brge	.-96     	; 0xb20 <Stepper2_rotatedown+0x6>
 b80:	08 95       	ret

00000b82 <Stepper1_rotateUp>:
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	2d c0       	rjmp	.+90     	; 0xbe2 <Stepper1_rotateUp+0x60>
 b88:	29 e0       	ldi	r18, 0x09	; 9
 b8a:	22 bb       	out	0x12, r18	; 18
 b8c:	2f ef       	ldi	r18, 0xFF	; 255
 b8e:	31 ee       	ldi	r19, 0xE1	; 225
 b90:	44 e0       	ldi	r20, 0x04	; 4
 b92:	21 50       	subi	r18, 0x01	; 1
 b94:	30 40       	sbci	r19, 0x00	; 0
 b96:	40 40       	sbci	r20, 0x00	; 0
 b98:	e1 f7       	brne	.-8      	; 0xb92 <Stepper1_rotateUp+0x10>
 b9a:	00 c0       	rjmp	.+0      	; 0xb9c <Stepper1_rotateUp+0x1a>
 b9c:	00 00       	nop
 b9e:	23 e0       	ldi	r18, 0x03	; 3
 ba0:	22 bb       	out	0x12, r18	; 18
 ba2:	2f ef       	ldi	r18, 0xFF	; 255
 ba4:	31 ee       	ldi	r19, 0xE1	; 225
 ba6:	44 e0       	ldi	r20, 0x04	; 4
 ba8:	21 50       	subi	r18, 0x01	; 1
 baa:	30 40       	sbci	r19, 0x00	; 0
 bac:	40 40       	sbci	r20, 0x00	; 0
 bae:	e1 f7       	brne	.-8      	; 0xba8 <Stepper1_rotateUp+0x26>
 bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <Stepper1_rotateUp+0x30>
 bb2:	00 00       	nop
 bb4:	26 e0       	ldi	r18, 0x06	; 6
 bb6:	22 bb       	out	0x12, r18	; 18
 bb8:	2f ef       	ldi	r18, 0xFF	; 255
 bba:	31 ee       	ldi	r19, 0xE1	; 225
 bbc:	44 e0       	ldi	r20, 0x04	; 4
 bbe:	21 50       	subi	r18, 0x01	; 1
 bc0:	30 40       	sbci	r19, 0x00	; 0
 bc2:	40 40       	sbci	r20, 0x00	; 0
 bc4:	e1 f7       	brne	.-8      	; 0xbbe <Stepper1_rotateUp+0x3c>
 bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <Stepper1_rotateUp+0x46>
 bc8:	00 00       	nop
 bca:	2c e0       	ldi	r18, 0x0C	; 12
 bcc:	22 bb       	out	0x12, r18	; 18
 bce:	2f ef       	ldi	r18, 0xFF	; 255
 bd0:	31 ee       	ldi	r19, 0xE1	; 225
 bd2:	44 e0       	ldi	r20, 0x04	; 4
 bd4:	21 50       	subi	r18, 0x01	; 1
 bd6:	30 40       	sbci	r19, 0x00	; 0
 bd8:	40 40       	sbci	r20, 0x00	; 0
 bda:	e1 f7       	brne	.-8      	; 0xbd4 <Stepper1_rotateUp+0x52>
 bdc:	00 c0       	rjmp	.+0      	; 0xbde <Stepper1_rotateUp+0x5c>
 bde:	00 00       	nop
 be0:	01 96       	adiw	r24, 0x01	; 1
 be2:	18 16       	cp	r1, r24
 be4:	19 06       	cpc	r1, r25
 be6:	84 f6       	brge	.-96     	; 0xb88 <Stepper1_rotateUp+0x6>
 be8:	08 95       	ret

00000bea <InitializationUart>:
 bea:	10 bc       	out	0x20, r1	; 32
 bec:	89 e1       	ldi	r24, 0x19	; 25
 bee:	89 b9       	out	0x09, r24	; 9
 bf0:	88 e1       	ldi	r24, 0x18	; 24
 bf2:	8a b9       	out	0x0a, r24	; 10
 bf4:	80 b5       	in	r24, 0x20	; 32
 bf6:	8e 60       	ori	r24, 0x0E	; 14
 bf8:	80 bd       	out	0x20, r24	; 32
 bfa:	08 95       	ret

00000bfc <sentData>:
 bfc:	5d 9b       	sbis	0x0b, 5	; 11
 bfe:	fe cf       	rjmp	.-4      	; 0xbfc <sentData>
 c00:	8c b9       	out	0x0c, r24	; 12
 c02:	08 95       	ret

00000c04 <HCSR04Init>:
 c04:	84 b3       	in	r24, 0x14	; 20
 c06:	81 60       	ori	r24, 0x01	; 1
 c08:	84 bb       	out	0x14, r24	; 20
 c0a:	08 95       	ret

00000c0c <HCSR04Trigger>:
 c0c:	85 b3       	in	r24, 0x15	; 21
 c0e:	81 60       	ori	r24, 0x01	; 1
 c10:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c12:	85 e0       	ldi	r24, 0x05	; 5
 c14:	8a 95       	dec	r24
 c16:	f1 f7       	brne	.-4      	; 0xc14 <HCSR04Trigger+0x8>
 c18:	85 b3       	in	r24, 0x15	; 21
 c1a:	8e 7f       	andi	r24, 0xFE	; 254
 c1c:	85 bb       	out	0x15, r24	; 21
 c1e:	08 95       	ret

00000c20 <GetPulseWidth>:
 c20:	1f bc       	out	0x2f, r1	; 47
 c22:	82 e0       	ldi	r24, 0x02	; 2
 c24:	8e bd       	out	0x2e, r24	; 46
 c26:	1d bc       	out	0x2d, r1	; 45
 c28:	1c bc       	out	0x2c, r1	; 44
 c2a:	80 e0       	ldi	r24, 0x00	; 0
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	dc 01       	movw	r26, r24
 c30:	0a c0       	rjmp	.+20     	; 0xc46 <GetPulseWidth+0x26>
 c32:	99 9b       	sbis	0x13, 1	; 19
 c34:	0f c0       	rjmp	.+30     	; 0xc54 <GetPulseWidth+0x34>
 c36:	2c b5       	in	r18, 0x2c	; 44
 c38:	3d b5       	in	r19, 0x2d	; 45
 c3a:	21 36       	cpi	r18, 0x61	; 97
 c3c:	3a 4e       	sbci	r19, 0xEA	; 234
 c3e:	50 f4       	brcc	.+20     	; 0xc54 <GetPulseWidth+0x34>
 c40:	01 96       	adiw	r24, 0x01	; 1
 c42:	a1 1d       	adc	r26, r1
 c44:	b1 1d       	adc	r27, r1
 c46:	80 3c       	cpi	r24, 0xC0	; 192
 c48:	27 e2       	ldi	r18, 0x27	; 39
 c4a:	92 07       	cpc	r25, r18
 c4c:	29 e0       	ldi	r18, 0x09	; 9
 c4e:	a2 07       	cpc	r26, r18
 c50:	b1 05       	cpc	r27, r1
 c52:	78 f3       	brcs	.-34     	; 0xc32 <GetPulseWidth+0x12>
 c54:	80 3c       	cpi	r24, 0xC0	; 192
 c56:	97 42       	sbci	r25, 0x27	; 39
 c58:	a9 40       	sbci	r26, 0x09	; 9
 c5a:	b1 05       	cpc	r27, r1
 c5c:	81 f0       	breq	.+32     	; 0xc7e <GetPulseWidth+0x5e>
 c5e:	8c b5       	in	r24, 0x2c	; 44
 c60:	9d b5       	in	r25, 0x2d	; 45
 c62:	a0 e0       	ldi	r26, 0x00	; 0
 c64:	b0 e0       	ldi	r27, 0x00	; 0
 c66:	1e bc       	out	0x2e, r1	; 46
 c68:	81 36       	cpi	r24, 0x61	; 97
 c6a:	2a ee       	ldi	r18, 0xEA	; 234
 c6c:	92 07       	cpc	r25, r18
 c6e:	a1 05       	cpc	r26, r1
 c70:	b1 05       	cpc	r27, r1
 c72:	40 f4       	brcc	.+16     	; 0xc84 <GetPulseWidth+0x64>
 c74:	b6 95       	lsr	r27
 c76:	a7 95       	ror	r26
 c78:	97 95       	ror	r25
 c7a:	87 95       	ror	r24
 c7c:	08 95       	ret
 c7e:	8e ef       	ldi	r24, 0xFE	; 254
 c80:	9f ef       	ldi	r25, 0xFF	; 255
 c82:	08 95       	ret
 c84:	8e ef       	ldi	r24, 0xFE	; 254
 c86:	9f ef       	ldi	r25, 0xFF	; 255
 c88:	08 95       	ret

00000c8a <calculate>:
 c8a:	8f ef       	ldi	r24, 0xFF	; 255
 c8c:	87 bb       	out	0x17, r24	; 23
 c8e:	0e 94 02 06 	call	0xc04	; 0xc04 <HCSR04Init>
 c92:	0e 94 06 06 	call	0xc0c	; 0xc0c <HCSR04Trigger>
 c96:	0e 94 10 06 	call	0xc20	; 0xc20 <GetPulseWidth>
 c9a:	bc 01       	movw	r22, r24
 c9c:	80 e0       	ldi	r24, 0x00	; 0
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	0e 94 9c 06 	call	0xd38	; 0xd38 <__floatunsisf>
 ca4:	26 e9       	ldi	r18, 0x96	; 150
 ca6:	33 e4       	ldi	r19, 0x43	; 67
 ca8:	4b e0       	ldi	r20, 0x0B	; 11
 caa:	5d e3       	ldi	r21, 0x3D	; 61
 cac:	0e 94 02 07 	call	0xe04	; 0xe04 <__mulsf3>
 cb0:	20 e0       	ldi	r18, 0x00	; 0
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	40 e0       	ldi	r20, 0x00	; 0
 cb6:	5f e3       	ldi	r21, 0x3F	; 63
 cb8:	0e 94 02 07 	call	0xe04	; 0xe04 <__mulsf3>
 cbc:	0e 94 66 06 	call	0xccc	; 0xccc <__fixsfsi>
 cc0:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <distance+0x1>
 cc4:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <distance>
 cc8:	cb 01       	movw	r24, r22
 cca:	08 95       	ret

00000ccc <__fixsfsi>:
 ccc:	0e 94 6d 06 	call	0xcda	; 0xcda <__fixunssfsi>
 cd0:	68 94       	set
 cd2:	b1 11       	cpse	r27, r1
 cd4:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__fp_szero>
 cd8:	08 95       	ret

00000cda <__fixunssfsi>:
 cda:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fp_splitA>
 cde:	88 f0       	brcs	.+34     	; 0xd02 <__fixunssfsi+0x28>
 ce0:	9f 57       	subi	r25, 0x7F	; 127
 ce2:	98 f0       	brcs	.+38     	; 0xd0a <__fixunssfsi+0x30>
 ce4:	b9 2f       	mov	r27, r25
 ce6:	99 27       	eor	r25, r25
 ce8:	b7 51       	subi	r27, 0x17	; 23
 cea:	b0 f0       	brcs	.+44     	; 0xd18 <__fixunssfsi+0x3e>
 cec:	e1 f0       	breq	.+56     	; 0xd26 <__fixunssfsi+0x4c>
 cee:	66 0f       	add	r22, r22
 cf0:	77 1f       	adc	r23, r23
 cf2:	88 1f       	adc	r24, r24
 cf4:	99 1f       	adc	r25, r25
 cf6:	1a f0       	brmi	.+6      	; 0xcfe <__fixunssfsi+0x24>
 cf8:	ba 95       	dec	r27
 cfa:	c9 f7       	brne	.-14     	; 0xcee <__fixunssfsi+0x14>
 cfc:	14 c0       	rjmp	.+40     	; 0xd26 <__fixunssfsi+0x4c>
 cfe:	b1 30       	cpi	r27, 0x01	; 1
 d00:	91 f0       	breq	.+36     	; 0xd26 <__fixunssfsi+0x4c>
 d02:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fp_zero>
 d06:	b1 e0       	ldi	r27, 0x01	; 1
 d08:	08 95       	ret
 d0a:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__fp_zero>
 d0e:	67 2f       	mov	r22, r23
 d10:	78 2f       	mov	r23, r24
 d12:	88 27       	eor	r24, r24
 d14:	b8 5f       	subi	r27, 0xF8	; 248
 d16:	39 f0       	breq	.+14     	; 0xd26 <__fixunssfsi+0x4c>
 d18:	b9 3f       	cpi	r27, 0xF9	; 249
 d1a:	cc f3       	brlt	.-14     	; 0xd0e <__fixunssfsi+0x34>
 d1c:	86 95       	lsr	r24
 d1e:	77 95       	ror	r23
 d20:	67 95       	ror	r22
 d22:	b3 95       	inc	r27
 d24:	d9 f7       	brne	.-10     	; 0xd1c <__fixunssfsi+0x42>
 d26:	3e f4       	brtc	.+14     	; 0xd36 <__fixunssfsi+0x5c>
 d28:	90 95       	com	r25
 d2a:	80 95       	com	r24
 d2c:	70 95       	com	r23
 d2e:	61 95       	neg	r22
 d30:	7f 4f       	sbci	r23, 0xFF	; 255
 d32:	8f 4f       	sbci	r24, 0xFF	; 255
 d34:	9f 4f       	sbci	r25, 0xFF	; 255
 d36:	08 95       	ret

00000d38 <__floatunsisf>:
 d38:	e8 94       	clt
 d3a:	09 c0       	rjmp	.+18     	; 0xd4e <__floatsisf+0x12>

00000d3c <__floatsisf>:
 d3c:	97 fb       	bst	r25, 7
 d3e:	3e f4       	brtc	.+14     	; 0xd4e <__floatsisf+0x12>
 d40:	90 95       	com	r25
 d42:	80 95       	com	r24
 d44:	70 95       	com	r23
 d46:	61 95       	neg	r22
 d48:	7f 4f       	sbci	r23, 0xFF	; 255
 d4a:	8f 4f       	sbci	r24, 0xFF	; 255
 d4c:	9f 4f       	sbci	r25, 0xFF	; 255
 d4e:	99 23       	and	r25, r25
 d50:	a9 f0       	breq	.+42     	; 0xd7c <__floatsisf+0x40>
 d52:	f9 2f       	mov	r31, r25
 d54:	96 e9       	ldi	r25, 0x96	; 150
 d56:	bb 27       	eor	r27, r27
 d58:	93 95       	inc	r25
 d5a:	f6 95       	lsr	r31
 d5c:	87 95       	ror	r24
 d5e:	77 95       	ror	r23
 d60:	67 95       	ror	r22
 d62:	b7 95       	ror	r27
 d64:	f1 11       	cpse	r31, r1
 d66:	f8 cf       	rjmp	.-16     	; 0xd58 <__floatsisf+0x1c>
 d68:	fa f4       	brpl	.+62     	; 0xda8 <__floatsisf+0x6c>
 d6a:	bb 0f       	add	r27, r27
 d6c:	11 f4       	brne	.+4      	; 0xd72 <__floatsisf+0x36>
 d6e:	60 ff       	sbrs	r22, 0
 d70:	1b c0       	rjmp	.+54     	; 0xda8 <__floatsisf+0x6c>
 d72:	6f 5f       	subi	r22, 0xFF	; 255
 d74:	7f 4f       	sbci	r23, 0xFF	; 255
 d76:	8f 4f       	sbci	r24, 0xFF	; 255
 d78:	9f 4f       	sbci	r25, 0xFF	; 255
 d7a:	16 c0       	rjmp	.+44     	; 0xda8 <__floatsisf+0x6c>
 d7c:	88 23       	and	r24, r24
 d7e:	11 f0       	breq	.+4      	; 0xd84 <__floatsisf+0x48>
 d80:	96 e9       	ldi	r25, 0x96	; 150
 d82:	11 c0       	rjmp	.+34     	; 0xda6 <__floatsisf+0x6a>
 d84:	77 23       	and	r23, r23
 d86:	21 f0       	breq	.+8      	; 0xd90 <__floatsisf+0x54>
 d88:	9e e8       	ldi	r25, 0x8E	; 142
 d8a:	87 2f       	mov	r24, r23
 d8c:	76 2f       	mov	r23, r22
 d8e:	05 c0       	rjmp	.+10     	; 0xd9a <__floatsisf+0x5e>
 d90:	66 23       	and	r22, r22
 d92:	71 f0       	breq	.+28     	; 0xdb0 <__floatsisf+0x74>
 d94:	96 e8       	ldi	r25, 0x86	; 134
 d96:	86 2f       	mov	r24, r22
 d98:	70 e0       	ldi	r23, 0x00	; 0
 d9a:	60 e0       	ldi	r22, 0x00	; 0
 d9c:	2a f0       	brmi	.+10     	; 0xda8 <__floatsisf+0x6c>
 d9e:	9a 95       	dec	r25
 da0:	66 0f       	add	r22, r22
 da2:	77 1f       	adc	r23, r23
 da4:	88 1f       	adc	r24, r24
 da6:	da f7       	brpl	.-10     	; 0xd9e <__floatsisf+0x62>
 da8:	88 0f       	add	r24, r24
 daa:	96 95       	lsr	r25
 dac:	87 95       	ror	r24
 dae:	97 f9       	bld	r25, 7
 db0:	08 95       	ret

00000db2 <__fp_split3>:
 db2:	57 fd       	sbrc	r21, 7
 db4:	90 58       	subi	r25, 0x80	; 128
 db6:	44 0f       	add	r20, r20
 db8:	55 1f       	adc	r21, r21
 dba:	59 f0       	breq	.+22     	; 0xdd2 <__fp_splitA+0x10>
 dbc:	5f 3f       	cpi	r21, 0xFF	; 255
 dbe:	71 f0       	breq	.+28     	; 0xddc <__fp_splitA+0x1a>
 dc0:	47 95       	ror	r20

00000dc2 <__fp_splitA>:
 dc2:	88 0f       	add	r24, r24
 dc4:	97 fb       	bst	r25, 7
 dc6:	99 1f       	adc	r25, r25
 dc8:	61 f0       	breq	.+24     	; 0xde2 <__fp_splitA+0x20>
 dca:	9f 3f       	cpi	r25, 0xFF	; 255
 dcc:	79 f0       	breq	.+30     	; 0xdec <__fp_splitA+0x2a>
 dce:	87 95       	ror	r24
 dd0:	08 95       	ret
 dd2:	12 16       	cp	r1, r18
 dd4:	13 06       	cpc	r1, r19
 dd6:	14 06       	cpc	r1, r20
 dd8:	55 1f       	adc	r21, r21
 dda:	f2 cf       	rjmp	.-28     	; 0xdc0 <__fp_split3+0xe>
 ddc:	46 95       	lsr	r20
 dde:	f1 df       	rcall	.-30     	; 0xdc2 <__fp_splitA>
 de0:	08 c0       	rjmp	.+16     	; 0xdf2 <__fp_splitA+0x30>
 de2:	16 16       	cp	r1, r22
 de4:	17 06       	cpc	r1, r23
 de6:	18 06       	cpc	r1, r24
 de8:	99 1f       	adc	r25, r25
 dea:	f1 cf       	rjmp	.-30     	; 0xdce <__fp_splitA+0xc>
 dec:	86 95       	lsr	r24
 dee:	71 05       	cpc	r23, r1
 df0:	61 05       	cpc	r22, r1
 df2:	08 94       	sec
 df4:	08 95       	ret

00000df6 <__fp_zero>:
 df6:	e8 94       	clt

00000df8 <__fp_szero>:
 df8:	bb 27       	eor	r27, r27
 dfa:	66 27       	eor	r22, r22
 dfc:	77 27       	eor	r23, r23
 dfe:	cb 01       	movw	r24, r22
 e00:	97 f9       	bld	r25, 7
 e02:	08 95       	ret

00000e04 <__mulsf3>:
 e04:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3x>
 e08:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_round>
 e0c:	0e 94 78 07 	call	0xef0	; 0xef0 <__fp_pscA>
 e10:	38 f0       	brcs	.+14     	; 0xe20 <__mulsf3+0x1c>
 e12:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_pscB>
 e16:	20 f0       	brcs	.+8      	; 0xe20 <__mulsf3+0x1c>
 e18:	95 23       	and	r25, r21
 e1a:	11 f0       	breq	.+4      	; 0xe20 <__mulsf3+0x1c>
 e1c:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_inf>
 e20:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_nan>
 e24:	11 24       	eor	r1, r1
 e26:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__fp_szero>

00000e2a <__mulsf3x>:
 e2a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_split3>
 e2e:	70 f3       	brcs	.-36     	; 0xe0c <__mulsf3+0x8>

00000e30 <__mulsf3_pse>:
 e30:	95 9f       	mul	r25, r21
 e32:	c1 f3       	breq	.-16     	; 0xe24 <__mulsf3+0x20>
 e34:	95 0f       	add	r25, r21
 e36:	50 e0       	ldi	r21, 0x00	; 0
 e38:	55 1f       	adc	r21, r21
 e3a:	62 9f       	mul	r22, r18
 e3c:	f0 01       	movw	r30, r0
 e3e:	72 9f       	mul	r23, r18
 e40:	bb 27       	eor	r27, r27
 e42:	f0 0d       	add	r31, r0
 e44:	b1 1d       	adc	r27, r1
 e46:	63 9f       	mul	r22, r19
 e48:	aa 27       	eor	r26, r26
 e4a:	f0 0d       	add	r31, r0
 e4c:	b1 1d       	adc	r27, r1
 e4e:	aa 1f       	adc	r26, r26
 e50:	64 9f       	mul	r22, r20
 e52:	66 27       	eor	r22, r22
 e54:	b0 0d       	add	r27, r0
 e56:	a1 1d       	adc	r26, r1
 e58:	66 1f       	adc	r22, r22
 e5a:	82 9f       	mul	r24, r18
 e5c:	22 27       	eor	r18, r18
 e5e:	b0 0d       	add	r27, r0
 e60:	a1 1d       	adc	r26, r1
 e62:	62 1f       	adc	r22, r18
 e64:	73 9f       	mul	r23, r19
 e66:	b0 0d       	add	r27, r0
 e68:	a1 1d       	adc	r26, r1
 e6a:	62 1f       	adc	r22, r18
 e6c:	83 9f       	mul	r24, r19
 e6e:	a0 0d       	add	r26, r0
 e70:	61 1d       	adc	r22, r1
 e72:	22 1f       	adc	r18, r18
 e74:	74 9f       	mul	r23, r20
 e76:	33 27       	eor	r19, r19
 e78:	a0 0d       	add	r26, r0
 e7a:	61 1d       	adc	r22, r1
 e7c:	23 1f       	adc	r18, r19
 e7e:	84 9f       	mul	r24, r20
 e80:	60 0d       	add	r22, r0
 e82:	21 1d       	adc	r18, r1
 e84:	82 2f       	mov	r24, r18
 e86:	76 2f       	mov	r23, r22
 e88:	6a 2f       	mov	r22, r26
 e8a:	11 24       	eor	r1, r1
 e8c:	9f 57       	subi	r25, 0x7F	; 127
 e8e:	50 40       	sbci	r21, 0x00	; 0
 e90:	9a f0       	brmi	.+38     	; 0xeb8 <__mulsf3_pse+0x88>
 e92:	f1 f0       	breq	.+60     	; 0xed0 <__mulsf3_pse+0xa0>
 e94:	88 23       	and	r24, r24
 e96:	4a f0       	brmi	.+18     	; 0xeaa <__mulsf3_pse+0x7a>
 e98:	ee 0f       	add	r30, r30
 e9a:	ff 1f       	adc	r31, r31
 e9c:	bb 1f       	adc	r27, r27
 e9e:	66 1f       	adc	r22, r22
 ea0:	77 1f       	adc	r23, r23
 ea2:	88 1f       	adc	r24, r24
 ea4:	91 50       	subi	r25, 0x01	; 1
 ea6:	50 40       	sbci	r21, 0x00	; 0
 ea8:	a9 f7       	brne	.-22     	; 0xe94 <__mulsf3_pse+0x64>
 eaa:	9e 3f       	cpi	r25, 0xFE	; 254
 eac:	51 05       	cpc	r21, r1
 eae:	80 f0       	brcs	.+32     	; 0xed0 <__mulsf3_pse+0xa0>
 eb0:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_inf>
 eb4:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__fp_szero>
 eb8:	5f 3f       	cpi	r21, 0xFF	; 255
 eba:	e4 f3       	brlt	.-8      	; 0xeb4 <__mulsf3_pse+0x84>
 ebc:	98 3e       	cpi	r25, 0xE8	; 232
 ebe:	d4 f3       	brlt	.-12     	; 0xeb4 <__mulsf3_pse+0x84>
 ec0:	86 95       	lsr	r24
 ec2:	77 95       	ror	r23
 ec4:	67 95       	ror	r22
 ec6:	b7 95       	ror	r27
 ec8:	f7 95       	ror	r31
 eca:	e7 95       	ror	r30
 ecc:	9f 5f       	subi	r25, 0xFF	; 255
 ece:	c1 f7       	brne	.-16     	; 0xec0 <__mulsf3_pse+0x90>
 ed0:	fe 2b       	or	r31, r30
 ed2:	88 0f       	add	r24, r24
 ed4:	91 1d       	adc	r25, r1
 ed6:	96 95       	lsr	r25
 ed8:	87 95       	ror	r24
 eda:	97 f9       	bld	r25, 7
 edc:	08 95       	ret

00000ede <__fp_inf>:
 ede:	97 f9       	bld	r25, 7
 ee0:	9f 67       	ori	r25, 0x7F	; 127
 ee2:	80 e8       	ldi	r24, 0x80	; 128
 ee4:	70 e0       	ldi	r23, 0x00	; 0
 ee6:	60 e0       	ldi	r22, 0x00	; 0
 ee8:	08 95       	ret

00000eea <__fp_nan>:
 eea:	9f ef       	ldi	r25, 0xFF	; 255
 eec:	80 ec       	ldi	r24, 0xC0	; 192
 eee:	08 95       	ret

00000ef0 <__fp_pscA>:
 ef0:	00 24       	eor	r0, r0
 ef2:	0a 94       	dec	r0
 ef4:	16 16       	cp	r1, r22
 ef6:	17 06       	cpc	r1, r23
 ef8:	18 06       	cpc	r1, r24
 efa:	09 06       	cpc	r0, r25
 efc:	08 95       	ret

00000efe <__fp_pscB>:
 efe:	00 24       	eor	r0, r0
 f00:	0a 94       	dec	r0
 f02:	12 16       	cp	r1, r18
 f04:	13 06       	cpc	r1, r19
 f06:	14 06       	cpc	r1, r20
 f08:	05 06       	cpc	r0, r21
 f0a:	08 95       	ret

00000f0c <__fp_round>:
 f0c:	09 2e       	mov	r0, r25
 f0e:	03 94       	inc	r0
 f10:	00 0c       	add	r0, r0
 f12:	11 f4       	brne	.+4      	; 0xf18 <__fp_round+0xc>
 f14:	88 23       	and	r24, r24
 f16:	52 f0       	brmi	.+20     	; 0xf2c <__fp_round+0x20>
 f18:	bb 0f       	add	r27, r27
 f1a:	40 f4       	brcc	.+16     	; 0xf2c <__fp_round+0x20>
 f1c:	bf 2b       	or	r27, r31
 f1e:	11 f4       	brne	.+4      	; 0xf24 <__fp_round+0x18>
 f20:	60 ff       	sbrs	r22, 0
 f22:	04 c0       	rjmp	.+8      	; 0xf2c <__fp_round+0x20>
 f24:	6f 5f       	subi	r22, 0xFF	; 255
 f26:	7f 4f       	sbci	r23, 0xFF	; 255
 f28:	8f 4f       	sbci	r24, 0xFF	; 255
 f2a:	9f 4f       	sbci	r25, 0xFF	; 255
 f2c:	08 95       	ret

00000f2e <__udivmodsi4>:
 f2e:	a1 e2       	ldi	r26, 0x21	; 33
 f30:	1a 2e       	mov	r1, r26
 f32:	aa 1b       	sub	r26, r26
 f34:	bb 1b       	sub	r27, r27
 f36:	fd 01       	movw	r30, r26
 f38:	0d c0       	rjmp	.+26     	; 0xf54 <__udivmodsi4_ep>

00000f3a <__udivmodsi4_loop>:
 f3a:	aa 1f       	adc	r26, r26
 f3c:	bb 1f       	adc	r27, r27
 f3e:	ee 1f       	adc	r30, r30
 f40:	ff 1f       	adc	r31, r31
 f42:	a2 17       	cp	r26, r18
 f44:	b3 07       	cpc	r27, r19
 f46:	e4 07       	cpc	r30, r20
 f48:	f5 07       	cpc	r31, r21
 f4a:	20 f0       	brcs	.+8      	; 0xf54 <__udivmodsi4_ep>
 f4c:	a2 1b       	sub	r26, r18
 f4e:	b3 0b       	sbc	r27, r19
 f50:	e4 0b       	sbc	r30, r20
 f52:	f5 0b       	sbc	r31, r21

00000f54 <__udivmodsi4_ep>:
 f54:	66 1f       	adc	r22, r22
 f56:	77 1f       	adc	r23, r23
 f58:	88 1f       	adc	r24, r24
 f5a:	99 1f       	adc	r25, r25
 f5c:	1a 94       	dec	r1
 f5e:	69 f7       	brne	.-38     	; 0xf3a <__udivmodsi4_loop>
 f60:	60 95       	com	r22
 f62:	70 95       	com	r23
 f64:	80 95       	com	r24
 f66:	90 95       	com	r25
 f68:	9b 01       	movw	r18, r22
 f6a:	ac 01       	movw	r20, r24
 f6c:	bd 01       	movw	r22, r26
 f6e:	cf 01       	movw	r24, r30
 f70:	08 95       	ret

00000f72 <_exit>:
 f72:	f8 94       	cli

00000f74 <__stop_program>:
 f74:	ff cf       	rjmp	.-2      	; 0xf74 <__stop_program>
